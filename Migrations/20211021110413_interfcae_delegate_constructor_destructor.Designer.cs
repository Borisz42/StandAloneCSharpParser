// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StandAloneCSharpParser.model;

namespace StandAloneCSharpParser.Migrations
{
    [DbContext(typeof(CsharpDbContext))]
    [Migration("20211021110413_interfcae_delegate_constructor_destructor")]
    partial class interfcae_delegate_constructor_destructor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpAstNode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AstValue")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<long>("Location_range_end_column")
                        .HasColumnType("bigint");

                    b.Property<long>("Location_range_end_line")
                        .HasColumnType("bigint");

                    b.Property<long>("Location_range_start_column")
                        .HasColumnType("bigint");

                    b.Property<long>("Location_range_start_line")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int>("RawKind")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CsharpAstNodes");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AstNodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CsharpNamespaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsInterface")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.HasIndex("CsharpNamespaceId");

                    b.ToTable("CsharpClasses");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpEnum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AstNodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CsharpNamespaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.HasIndex("CsharpNamespaceId");

                    b.ToTable("CsharpEnums");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpEnumMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AstNodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CsharpEnumId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<int>("EqualsValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.HasIndex("CsharpEnumId");

                    b.ToTable("CsharpEnumMember");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AstNodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CsharpClassId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CsharpClassId1")
                        .HasColumnType("bigint");

                    b.Property<long?>("CsharpClassId2")
                        .HasColumnType("bigint");

                    b.Property<long?>("CsharpStructId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelegate")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.Property<string>("QualifiedType")
                        .HasColumnType("text");

                    b.Property<long>("TypeHash")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.HasIndex("CsharpClassId");

                    b.HasIndex("CsharpClassId1");

                    b.HasIndex("CsharpClassId2");

                    b.HasIndex("CsharpStructId");

                    b.ToTable("CsharpMethod");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpNamespace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AstNodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.ToTable("CsharpNamespaces");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpStruct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AstNodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CsharpNamespaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.HasIndex("CsharpNamespaceId");

                    b.ToTable("CsharpStructs");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpVariable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("AstNodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CsharpClassId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CsharpMethodId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CsharpMethodId1")
                        .HasColumnType("bigint");

                    b.Property<long?>("CsharpStructId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsProperty")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.Property<string>("QualifiedType")
                        .HasColumnType("text");

                    b.Property<long>("TypeHash")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.HasIndex("CsharpClassId");

                    b.HasIndex("CsharpMethodId");

                    b.HasIndex("CsharpMethodId1");

                    b.HasIndex("CsharpStructId");

                    b.ToTable("CsharpVariable");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpClass", b =>
                {
                    b.HasOne("StandAloneCSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.HasOne("StandAloneCSharpParser.model.CsharpNamespace", "CsharpNamespace")
                        .WithMany()
                        .HasForeignKey("CsharpNamespaceId");

                    b.Navigation("AstNode");

                    b.Navigation("CsharpNamespace");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpEnum", b =>
                {
                    b.HasOne("StandAloneCSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.HasOne("StandAloneCSharpParser.model.CsharpNamespace", "CsharpNamespace")
                        .WithMany()
                        .HasForeignKey("CsharpNamespaceId");

                    b.Navigation("AstNode");

                    b.Navigation("CsharpNamespace");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpEnumMember", b =>
                {
                    b.HasOne("StandAloneCSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.HasOne("StandAloneCSharpParser.model.CsharpEnum", null)
                        .WithMany("CsharpEnumMembers")
                        .HasForeignKey("CsharpEnumId");

                    b.Navigation("AstNode");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpMethod", b =>
                {
                    b.HasOne("StandAloneCSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.HasOne("StandAloneCSharpParser.model.CsharpClass", null)
                        .WithMany("CsharpClassConstructors")
                        .HasForeignKey("CsharpClassId");

                    b.HasOne("StandAloneCSharpParser.model.CsharpClass", null)
                        .WithMany("CsharpClassDestructors")
                        .HasForeignKey("CsharpClassId1");

                    b.HasOne("StandAloneCSharpParser.model.CsharpClass", null)
                        .WithMany("CsharpClassMethods")
                        .HasForeignKey("CsharpClassId2");

                    b.HasOne("StandAloneCSharpParser.model.CsharpStruct", null)
                        .WithMany("CsharpStructMethods")
                        .HasForeignKey("CsharpStructId");

                    b.Navigation("AstNode");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpNamespace", b =>
                {
                    b.HasOne("StandAloneCSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.Navigation("AstNode");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpStruct", b =>
                {
                    b.HasOne("StandAloneCSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.HasOne("StandAloneCSharpParser.model.CsharpNamespace", "CsharpNamespace")
                        .WithMany()
                        .HasForeignKey("CsharpNamespaceId");

                    b.Navigation("AstNode");

                    b.Navigation("CsharpNamespace");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpVariable", b =>
                {
                    b.HasOne("StandAloneCSharpParser.model.CsharpAstNode", "AstNode")
                        .WithMany()
                        .HasForeignKey("AstNodeId");

                    b.HasOne("StandAloneCSharpParser.model.CsharpClass", null)
                        .WithMany("CsharpClassLocals")
                        .HasForeignKey("CsharpClassId");

                    b.HasOne("StandAloneCSharpParser.model.CsharpMethod", null)
                        .WithMany("CsharpMethodLocals")
                        .HasForeignKey("CsharpMethodId");

                    b.HasOne("StandAloneCSharpParser.model.CsharpMethod", null)
                        .WithMany("CsharpMethodParams")
                        .HasForeignKey("CsharpMethodId1");

                    b.HasOne("StandAloneCSharpParser.model.CsharpStruct", null)
                        .WithMany("CsharpStructLocals")
                        .HasForeignKey("CsharpStructId");

                    b.Navigation("AstNode");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpClass", b =>
                {
                    b.Navigation("CsharpClassConstructors");

                    b.Navigation("CsharpClassDestructors");

                    b.Navigation("CsharpClassLocals");

                    b.Navigation("CsharpClassMethods");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpEnum", b =>
                {
                    b.Navigation("CsharpEnumMembers");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpMethod", b =>
                {
                    b.Navigation("CsharpMethodLocals");

                    b.Navigation("CsharpMethodParams");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpStruct", b =>
                {
                    b.Navigation("CsharpStructLocals");

                    b.Navigation("CsharpStructMethods");
                });
#pragma warning restore 612, 618
        }
    }
}
