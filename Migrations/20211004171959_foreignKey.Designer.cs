// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StandAloneCSharpParser.model;

namespace StandAloneCSharpParser.Migrations
{
    [DbContext(typeof(CsharpDbContext))]
    [Migration("20211004171959_foreignKey")]
    partial class foreignKey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpAstNode", b =>
                {
                    b.Property<long>("AstNodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AstValue")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<long>("Location_range_end_column")
                        .HasColumnType("bigint");

                    b.Property<long>("Location_range_end_line")
                        .HasColumnType("bigint");

                    b.Property<long>("Location_range_start_column")
                        .HasColumnType("bigint");

                    b.Property<long>("Location_range_start_line")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int>("RawKind")
                        .HasColumnType("integer");

                    b.HasKey("AstNodeId");

                    b.ToTable("CsharpAstNodes");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AstNodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentationCommentXML")
                        .HasColumnType("text");

                    b.Property<long>("EntityHash")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("QualifiedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AstNodeId");

                    b.ToTable("CsharpEntity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CsharpEntity");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpClass", b =>
                {
                    b.HasBaseType("StandAloneCSharpParser.model.CsharpEntity");

                    b.Property<long?>("CsharpNamespaceId")
                        .HasColumnType("bigint");

                    b.HasIndex("CsharpNamespaceId");

                    b.HasDiscriminator().HasValue("CsharpClass");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpEnum", b =>
                {
                    b.HasBaseType("StandAloneCSharpParser.model.CsharpEntity");

                    b.Property<long?>("CsharpNamespaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("CsharpEnum_CsharpNamespaceId");

                    b.HasIndex("CsharpNamespaceId");

                    b.HasDiscriminator().HasValue("CsharpEnum");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpEnumMember", b =>
                {
                    b.HasBaseType("StandAloneCSharpParser.model.CsharpEntity");

                    b.Property<long?>("CsharpEnumId")
                        .HasColumnType("bigint");

                    b.Property<int>("EqualsValue")
                        .HasColumnType("integer");

                    b.HasIndex("CsharpEnumId");

                    b.HasDiscriminator().HasValue("CsharpEnumMember");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpMethod", b =>
                {
                    b.HasBaseType("StandAloneCSharpParser.model.CsharpEntity");

                    b.Property<long?>("CsharpClassId")
                        .HasColumnType("bigint");

                    b.Property<string>("QualifiedType")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text");

                    b.Property<long>("TypeHash")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint");

                    b.HasIndex("CsharpClassId");

                    b.HasDiscriminator().HasValue("CsharpMethod");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpNamespace", b =>
                {
                    b.HasBaseType("StandAloneCSharpParser.model.CsharpEntity");

                    b.HasDiscriminator().HasValue("CsharpNamespace");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpVariable", b =>
                {
                    b.HasBaseType("StandAloneCSharpParser.model.CsharpEntity");

                    b.Property<long?>("CsharpClassId")
                        .HasColumnType("bigint")
                        .HasColumnName("CsharpVariable_CsharpClassId");

                    b.Property<long?>("CsharpMethodId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CsharpMethodId1")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsProperty")
                        .HasColumnType("boolean");

                    b.Property<string>("QualifiedType")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text");

                    b.Property<long>("TypeHash")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint");

                    b.HasIndex("CsharpClassId");

                    b.HasIndex("CsharpMethodId");

                    b.HasIndex("CsharpMethodId1");

                    b.HasDiscriminator().HasValue("CsharpVariable");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpEntity", b =>
                {
                    b.HasOne("StandAloneCSharpParser.model.CsharpAstNode", null)
                        .WithMany()
                        .HasForeignKey("AstNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpClass", b =>
                {
                    b.HasOne("StandAloneCSharpParser.model.CsharpNamespace", null)
                        .WithMany("CsharpClasses")
                        .HasForeignKey("CsharpNamespaceId");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpEnum", b =>
                {
                    b.HasOne("StandAloneCSharpParser.model.CsharpNamespace", null)
                        .WithMany("CsharpEnums")
                        .HasForeignKey("CsharpNamespaceId");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpEnumMember", b =>
                {
                    b.HasOne("StandAloneCSharpParser.model.CsharpEnum", null)
                        .WithMany("CsharpEnumMembers")
                        .HasForeignKey("CsharpEnumId");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpMethod", b =>
                {
                    b.HasOne("StandAloneCSharpParser.model.CsharpClass", null)
                        .WithMany("CsharpClassMethods")
                        .HasForeignKey("CsharpClassId");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpVariable", b =>
                {
                    b.HasOne("StandAloneCSharpParser.model.CsharpClass", null)
                        .WithMany("CsharpClassLocals")
                        .HasForeignKey("CsharpClassId");

                    b.HasOne("StandAloneCSharpParser.model.CsharpMethod", null)
                        .WithMany("CsharpMethodLocals")
                        .HasForeignKey("CsharpMethodId");

                    b.HasOne("StandAloneCSharpParser.model.CsharpMethod", null)
                        .WithMany("CsharpMethodParams")
                        .HasForeignKey("CsharpMethodId1");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpClass", b =>
                {
                    b.Navigation("CsharpClassLocals");

                    b.Navigation("CsharpClassMethods");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpEnum", b =>
                {
                    b.Navigation("CsharpEnumMembers");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpMethod", b =>
                {
                    b.Navigation("CsharpMethodLocals");

                    b.Navigation("CsharpMethodParams");
                });

            modelBuilder.Entity("StandAloneCSharpParser.model.CsharpNamespace", b =>
                {
                    b.Navigation("CsharpClasses");

                    b.Navigation("CsharpEnums");
                });
#pragma warning restore 612, 618
        }
    }
}
